#### Installation ####
# File: .zshrc or .bashrc or ...
# Add:  source ~/.my_profile
# Done

### Determine OS being used ###
_my_os=$(uname)
case $_my_os in
  'Linux')
    _my_os='linux'
    ;;
  'WindowsNT')
    _my_os='dos'
    ;;
  'Darwin')
    _my_os='macOS'
    ;;
  *) ;;
esac

### Determine ARCH being used ###
_my_arch=$(uname -m)
case $_my_arch in
  x86_64)
    _my_arch=x64  # or AMD64 or Intel64 or whatever
    ;;
  i*86)
    _my_arch=x86  # or IA32 or Intel32 or whatever
    ;;
  *)
    ;;
esac

### Determine DISTRO being used ###
# by type
_my_distro=$(uname)
case $_my_distro in
  Linux )
    # test for distro by command
    _my_distro=$(cat /proc/version)
    if [[ "$_my_distro" == *"Ubuntu"* ]]; then
      _my_distro=debian
    elif [[ "$_my_distro" == *"Red Hat"* ]]; then
      _my_distro=rhel
    fi
    ;;
  Darwin )
     _my_distro=darwin
     ;;
  * )
     ;;
esac
 
### Determine SHELL being used ###
_my_shell=$(echo $0)
#_my_shell=$SHELL
if [[ $_my_shell == *zsh* ]]; then
  #!/bin/zsh
  _my_shell=zsh
elif [[ $_my_shell == *bash* ]]; then
  #!/bin/bash
  _my_shell=bash
fi

### Determine TERM being used ###
_my_term=$TERM
if [[ $_my_term == *xterm* ]]; then
  _my_term=xterm
fi

# Display env. in terminal
if [[ "$@" == *"-v"* ]]; then
  echo "$_my_os $_my_distro $_my_arch $_my_term $_my_shell"
  echo ""
fi

### Terminal History ###

# Saving HISTFILESIZE lines to disk and loading the last HISTSIZE lines into memory
HISTSIZE=10000
HISTFILESIZE=50000
# Append history from each session, not the last terminal to log out
if [[ $_my_shell == bash ]]; then
  shopt -s histappend > /dev/null 2>&1
elif [[ $_my_shell == zsh ]]; then
  setopt INC_APPEND_HISTORY > /dev/null 2>&1
fi
# Add commands immediatley to history, not wait for log out
export PROMPT_COMMAND="history -a; history -c; history -r; $PROMPT_COMMAND"

### Configuration ###

# expand aliases for non-interactive shell (i.e. scripts)
if [[ $_my_shell == bash ]]; then
  shopt -s expand_aliases
elif [[ $_my_shell == zsh ]]; then
  setopt aliases
fi

### Shared Variables ###

export EDITOR='vim'

if type htop > /dev/null 2>&1; then
  alias top='htop'
fi
alias vi='vim'
alias curl='noglob curl'
alias god='sudo'  # not the real God, hence lowercase.
alias please='god'
alias c='clear'
alias h='history'
alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../..'
alias mkdir='mkdir -pv'
if [[ $_my_os == macOS ]]; then
  alias df='df -ha'
else
  alias df='df -Tha'
fi
alias du='du -ach'
alias free='free -mt'
alias here='find . -iname'
alias whereami='hostname'
alias whatami='uname -a'
alias echoerr='>&2 echo'
alias now='date +"%m-%d-%Y %T.%3N"'  # w/ millisecond
# safety
alias rm='rm -i'
alias cp='cp -i'
alias mv='mv -i'
alias random='cat /dev/urandom | tr -cd 'a-f0-9' | head -c 64 | cut -c 1-'
alias plogout='sudo pkill -KILL -u'
alias apt-get='sudo apt-get'
alias psf='ps -e | grep -v grep | grep -i -e VSZ -e' # search process match (e.g. psf name)
if [[ $_my_os == macOS ]]; then
  alias ls='ls -GpF'
else
  alias ls='ls -pF --color=auto'
fi
alias l='ls'
alias ll='ls -lAh'
alias l.='ls -d .*'
alias la='ls -lah'
if [[ $_my_os == macOS ]]; then
  # gnu util for macOS
  alias timeout='gtimeout'
  alias ps='ps aux'
else
  alias ps='ps auxf'
fi

# ISO-8601 compliant date (in mongodb formate)
alias utc='date -u "+%Y-%m-%dT%H:%M:%S.%3NZ"'

# helpers for shutting down VMs and other things before system
alias reboot='vboxmanage --shutdown; sudo shutdown -r now'
alias shutdown='vboxmanage --shutdown; sudo shutdown now'

vboxmanage()
{
  if ! type vboxmanage > /dev/null 2>&1; then
    return 0
  fi

  if [ -n "$1" ] && [[ "$1" == "--upgrade" ]]; then
    # make sure user is in group for USB to work
    sudo adduser $USER vboxusers
    
    version=$(vboxmanage -v)
    var1=$(echo $version | cut -d '_' -f 1)
    var2=$(echo $version | cut -d 'r' -f 2)
    file="Oracle_VM_VirtualBox_Extension_Pack-$var1-$var2.vbox-extpack"
    wget http://download.virtualbox.org/virtualbox/$var1/$file -O /tmp/$file
    sudo vboxmanage extpack install /tmp/$file --replace
    #sudo /sbin/rcvboxdrv setup
  elif [ -n "$1" ] && [[ "$1" == "--shutdown" ]]; then
    _vms=`vboxmanage list runningvms | cut -d" " -f 1 | tr -d '"'`
    for _vm in $_vms; do
      vboxmanage controlvm $_vm poweroff soft
    done
  else
    command vboxmanage $@
  fi
}

if [[ $_my_distro == debian ]]; then
  upgrade() {
    apt-get update
    apt-get dist-upgrade
    apt-get upgrade
    apt-get autoclean
    apt-get autoremove
    sudo npm install npm@latest -g
    sudo npm i -g npm
    sudo npm -g upgrade
    sudo -H pip install $(pip list --outdated --format=legacy | awk '{ print $1 }') --upgrade
    sudo -H pip3 install $(pip3 list --outdated --format=legacy | awk '{ print $1 }') --upgrade
    sudo gem update
    sudo gem cleanup
    git -C $ZSH pull
  }
fi
if [[ $_my_distro == darwin ]]; then
  upgrade() {
    brew update
    brew upgrade
    brew cleanup
    brew cask cleanup
    brew linkapps # sets symbolic links from /Application directory to brew files
    sudo npm install npm@latest -g
    sudo npm i -g npm
    sudo npm -g upgrade
    sudo pip install $(pip list --outdated --format=legacy | awk '{ print $1 }') --upgrade
    sudo pip3 install $(pip list --outdated --format=legacy | awk '{ print $1 }') --upgrade
    sudo gem update
    git -C $ZSH pull
    #mas upgrade
  }
fi

# Replace defualt tooling with better similar option
if type ag > /dev/null 2>&1; then
  alias awk='ag'
fi
if type autojump > /dev/null 2>&1; then
  alias j='autojump'
fi

alias twitter='sudo rainbowstream -iot'
alias irc='weechat'

if [[ $_my_os == macOS ]]; then
  here() {
    # ignore permission denied messages
    find . -iname $1 2>&1 | grep -v "Permission denied"
  }
fi

# retry command 
# usage: retry <command>
retry() {
  _result=1
  while [ $_result -ne 0 ] ; do 
    "$@" && break 
    result=$?
    sleep 3
  done
}

# public ip
ipPub() {
    curl -s checkip.dyndns.org | sed -e 's/.*Current IP Address: //' -e 's/<.*$//'
}

# speed test
speedtest() {
  if type speedtest-cli > /dev/null 2>&1; then
   speedtest-cli
  elif type ./.local/bin/speedtest-cli > /dev/null 2>&1; then
    ./.local/bin/speedtest-cli
  else
    ipPub
    curl -o /dev/null http://speedtest.wdc01.softlayer.com/downloads/test10.zip
  fi
}

# like dos
pause(){
  read -rsp $'Press any key to continue...\n' -n 1 key
}

# show or not to show contents
herein() {
  if [ -n "$1" ] && [[ "$1" == "-s" ]]; then
    shift
    grep -Rni -A 1 -B 1 . -e "$@"
  else
    grep -Rnli . -e "$@"
  fi
}

# list some infor after each cd
cd() {
  if [ -n "$1" ]; then
    builtin cd "$@" && pwd && ls
  else
    builtin cd ~ && pwd && ls
  fi
}

# docker over-load
docker() {
  if [ -n "$1" ] && [[ "$1" == "--reset" ]]; then
    # remove containers not currently running
    command docker rm $(command docker ps -a -f status=exited -q) || true
    # remove images
    command docker rmi $(command docker images -f -q)|| true
    # remove dangling volumes
    command docker volume rm $(command docker volume ls -f -q) || true
  elif [ -n "$1" ] && [[ "$1" == "--init" ]]; then
    sudo iptables -t nat -F
    sudo ifconfig docker0 down
    sudo brctl delbr docker0
    sudo service docker restart
  else
    command docker "$@"
  fi
}

#if [[ $_my_shell == *zsh* ]]; then
#  which() {
#    (alias; declare -f) | command which --tty-only --read-alias --read-functions --show-tilde --show-dot $@
#  }
#elif [[ $_my_shell == *bash* ]]; then
#  alias which 'alias | command which --tty-only --read-alias -read-functions --show-dot --show-tilde'
#  export -f which
#fi

# history info "-i [depth]" added
history() {
  if [ -n "$1" ] && [[ "$1" == "-i" ]]; then
    local _depth=50
    if [ -n "$2" ]; then
      local _depth=$2
    fi
    builtin history | awk '{CMD[$2]++;count++;}END { for (a in CMD)print CMD[a] " " CMD[a]/count*100 "% " a;}' | grep -v "./" | column -c3 -s " " -t | sort -nr | nl |  head -n$_depth
  else
    builtin history "$@"
  fi
}

ssh()
{
  if type autossh > /dev/null 2>&1; then
    # disable the built-in AutoSSH monitoring port "-M 0"
    #
    #  "ServerAliveInterval" & "ServerAliveCountMax" â€“ they cause the SSH client to send traffic 
    #  through the encrypted link to the server. This will keep the connection alive when there
    #  is no other activity and also when it does not receive any alive data, it will tell AutoSSH
    #  that the connection is broken and AutoSSH will then restart the connection.
    autossh -M 0 -o "ServerAliveInterval 30" -o "ServerAliveCountMax 3" $@
  else
    echo "Hint: install 'autossh'"
    command ssh $@
  fi
}

screen() {
  local _session="default"
  # if no option(s), run default
  if [ -z "$1" ]; then
    # do not allow a screen inside a screen
    if [ -z "$STY" ]; then
      # if default screen not already running
      if [[ $(screen -list) != *$_session* ]]; then
        # create and attach
        command screen -D -R $_session
      else
        # re-attach if session started elsewhere (i.e. shared) or is detached
        command screen -xr $_session
      fi
    fi
  else
     command screen "$@"
  fi
}

git()
{
  if [ -n "$1" ] && [[ "$1" == "--commit" ]]; then
    command git add -A && command git commit
  elif [ -n "$1" ] && [[ "$1" == "--latest" ]]; then
    #command git pull && command git reset --hard HEAD
    command git pull && command git reset --hard origin/master
  else
    command git "$@"
  fi
}

mux()
{
  if [ -n "$1" ] && [[ "$1" == "-k" ]]; then
    if [ -n "$2" ]; then
      command tmux kill-session -t $2
    else
      command tmux kill-session
    fi
  else
    command mux "$@"
  fi
}

# kill vnc window(s) option added
vncserver()
{
  if [ -n "$1" ] && [[ "$1" == "-kill" ]] && [ -n "$2" ] && [[ "$2" == "all" ]]; then
    for v in ~/.vnc/*.pid
    do
      local _window=$(basename "$v" .pid)
      command vncserver -kill $_window
    done
  else
    command vncserver "$@"
  fi
}

# make space in terminal for scrolling
s() {
  space
}

space() {
  for i in {1..50}
  do
   echo ""
  done
  clear
}

# terminal screen saver (matrix)
if type cmatrix > /dev/null 2>&1; then
  tss() {
    cmatrix
    clear
  }
fi

# change priority of interfaces (i.e. to swap priority)
ifswap() {
  # ifmetric INTERFACE [METRIC]
  if [ $# -ne 2 ]; then
    ifconfig 
    echo ""
    echo "Pick higher and lower interface priority"
    echo "Example:  ifswap enp0 eno1"
  elif type ifmetric > /dev/null 2>&1; then
    # highest
    ifmetric $1 0
    # lower
    ifmetric $2 1
  fi
}

### Key Bindings ###

if [[ $_my_term == xterm ]]; then
  # backspace work instead of delete ^H
  stty erase '^?'
fi

# bind keys per shell and terminal
if [[ $_my_shell == zsh ]]; then
  # home and end keys
  bindkey '\e[1~' beginning-of-line
  bindkey '\e[4~' end-of-line
fi

### Other ###

if [[ $_my_os == macOS ]]; then
  if type archey > /dev/null 2>&1; then
    archey
  fi

  alias afplay='afplay -q 1'.

  # For fun...
  # play funny sounds from terminal
  source ~/.sounds/.sound > /dev/null 2>&1
fi

function finish {
  echo ""
}
trap finish EXIT
