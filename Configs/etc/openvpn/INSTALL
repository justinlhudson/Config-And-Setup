# https://www.digitalocean.com/community/tutorials/how-to-set-up-and-configure-an-openvpn-server-on-ubuntu-20-04
# https://www.digitalocean.com/community/tutorials/how-to-set-up-and-configure-a-certificate-authority-ca-on-ubuntu-20-04

apt-get install openvpn easy-rsa
apt-get install bridge-utils
apt-get install checkinstall zlib1g-dev

# root terminal
sudo -i

make-cadir /etc/openvpn/easy-rsa
cd /etc/openvpn/easy-rsa

mkdir ~/openvpn-confg/easy-rsa
ln -s /usr/share/easy-rsa/* ~/openvpn-confg/easy-rsa/
sudo chown $USER ~/openvpn-confg
chmod 700 ~/openvpn-confg/
# see vars file
vim ~/openvpn-confg/easy-rsa/vars
# no passphrase <enter> <enter>
./openvpn-confg/easyrsa build-ca
# company name "server"
./openvpn-confg/easyrsa build-ca nopass
ls ~/openvpn-confg/easy-rsa/pki/ 
./openvpn-confg/easyrsa init-pki
./openvpn-confg/easyrsa build-ca
sudo cp ~/openvpn-confg/easy-rsa/pki/ca.crt /usr/local/share/ca-certificates/
sudo update-ca-certificates
./openvpn-confg/easyrsa gen-req server nopass
    [server]
sudo cp ~/openvpn-confg/easy-rsa/pki/private/server.key /etc/openvpn/server/
scp ~/openvpn-confg/easy-rsa/pki/reqs/server.req $USER@$(hostname -I | awk '{print $1}'): /tmp
./openvpn-confg/easyrsa import-req /tmp/server.req server
./openvpn-confg/easyrsa sign-req server server
~/openvpn-confg/easy-rsa/pki/issued/server.crt
scp ~/openvpn-confg/easy-rsa/pki/reqs/server.req $USER@$(hostname -I | awk '{print $1}'): /tmp
scp pki/ca.crt $USER@$(hostname -I | awk '{print $1}'):/tmp
cp ~/openvpn-confg/easy-rsa/pki/issued/server.crt /tmp
sudo cp /tmp/{server.crt,ca.crt} /etc/openvpn/server

### make on CA server
openvpn --genkey --secret ta.key
sudo cp ta.key /etc/openvpn/server
mkdir -p ~/openvpn-confg/client-configs/keys/easyrsa gen-req client nopass
    [client]
cp pki/private/client.key ~/client-configs/keys/
scp ~/easy-rsa/pki/reqs/client.req $USER@$(hostname -I | awk '{print $1}'): /tmp
./easyrsa import-req /tmp/client.req client
./easyrsa sign-req client client1
scp ~/easy-rsa/pki/issued/client.crt $USER@$(hostname -I | awk '{print $1}'): /tmp
cp /tmp/client.crt ~/client-configs/keys/
cp ~/easy-rsa/ta.key ~/client-configs/keys/
sudo cp /etc/openvpn/server/ca.crt ~/client-configs/keys/
sudo chown $USER.$USER ~/client-configs/keys/*
sudo cp /usr/share/doc/openvpn/examples/sample-config-files/server.conf.gz /etc/openvpn/server/

sudo vim /etc/sysctl.conf
net.ipv4.ip_forward = 1
sudo sysctl -p

see:  
https://github.com/justinlhudson/Config-And-Setup/tree/master/Configs/etc/ufw
https://github.com/justinlhudson/Config-And-Setup/blob/master/Configs/etc/default/ufw

sudo ufw allow 1194/udp
sudo ufw allow OpenSSH

# Important make sure SSH is listed (and other ports you care about)
sudo ufw allow 22/tcp

sudo ufw disable
sudo ufw enable

sudo systemctl -f enable openvpn-server@server.service
sudo systemctl start openvpn-server@server.service

sudo systemctl status openvpn-server@server.service

mkdir -p ~/client-configs/files
cp /usr/share/doc/openvpn/examples/sample-config-files/client.conf ~/client-configs/base.conf
~/client-configs/files/base.conf ~/client-configs/files/client.conf
vim ~/client-configs/filesclient.conf
~/client-configs/files/client.conf ~/client-configs/files/client.ovpn


cp ~/client-configs/keys/* ~/client-configs/files/
tar -zcvf openvpn-client.tar.gz ~/client-config/client/

############## DEPRECATED ###################

# edit to reflect new CA information to make cert
vim /etc/openvpn/easy-rsa/vars

# suggestion:  keep generic
export KEY_COUNTRY="US"
export KEY_PROVINCE="NA"
export KEY_CITY="NA"
export KEY_ORG="<HOSTNAME>"
export KEY_EMAIL="<HOSTNAME>@<HOSTNAME>.noreply"
export KEY_OU="<HOSTNAME>"
export KEY_CN="<HOSTNAME>"

# X509 Subject Field
export KEY_NAME="<HOSTNAME>"
# Bug (needs variable)
export KEY_ALTNAMES="<NAME>_<RANDOM_STRING>"

ln -s openssl-1.0.0.cnf openssl.cnf
source /etc/openvpn/easy-rsa/vars

# build cert
./clean-all  ## Setup the easy-rsa directory (Deletes all keys)
./build-dh  ## random generator generating for ca creation (takes some time...)
./build-ca
./pkitool --initca

# create server keys pairs
./build-key-server <hostname>
# Note:  password not needed, yes sign, yes commit

# generated files located
cd keys/
openvpn --genkey --secret ta.key  ## Build a TLS key
cp ca.crt ca.key <hostname>.crt <hostname>.key ta.key dh2048.pem /etc/openvpn/

# forward traffic to LAN
vim /etc/sysctl.conf
# change
net.ipv4.ip_forward = 1
##net.ipv6.conf.all.forwarding=1
# refresh
sysctl -p

# configure routing back to clients on host computer
# Example: iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE
# NOTE: '../etc/iptables.local' & '../etc/NetworkManager/dispatcher.d/01-firewall'

# example server.conf
cp /usr/share/doc/openvpn/examples/sample-config-files/server.conf.gz /etc/openvpn/
gzip -d /etc/openvpn/server.conf.gz

vim /etc/openvpn/server.conf
# edit (save changes), see this server.config as example

## Client Cert & Key
cd /etc/openvpn/easy-rsa
source vars
# Note: leave common name same or be sure not the same as server ct (i.e. not hostname)
./build-key client
mkdir /etc/openvpn/client
cd /etc/openvpn/easy-rsa/keys
cp ca.crt ta.key client.crt client.key /etc/openvpn/client

# client template profile
cp /usr/share/doc/openvpn/examples/sample-config-files/client.conf /etc/openvpn/client/client.ovpn

# note:  match server with client config options in client.ovpn!
cd /etc/openvpn/client/
vim client.ovpn
# can change client.ovpn name if like to <name>.ovpn
# see example file 

# place client config in home area
tar -zcvf /tmp/openvpn-client.tar.gz /etc/openvpn/client/
# change permissions out of root
chmod 777 /tmp/openvpn-client.tar.gz

sudo systemctl restart openvpn@server
# done I hope :)

# Do NOT forget to setup iptables to see outside the server into the network

# See iptables.local
#EXAMPLE:

### VPN ###
_tun_if=tun0
_vpn_if=eno1

iptables -I FORWARD -i ${_tun_if} -o ${_tun_if} -j ACCEPT # VPN to VPN
iptables -I FORWARD -i ${_tun_if} -o ${_vpn_if} -j ACCEPT # VPN to LAN
iptables -I FORWARD -i ${_vpn_if} -o ${_tun_if} -m state --state RELATED,ESTABLISHED -j ACCEPT # VPN <-> LAN

iptables -t nat -I POSTROUTING -o ${_vpn_if} -s 10.8.1.0/24 -j MASQUERADE # VPN Clients as if is Server
