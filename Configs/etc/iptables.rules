### LAN ###
_lan_if=eno1
_host_ip="$(ip addr show ${_lan_if} | grep 'inet ' | awk '{print $2}' | cut -f1 -d'/')"
_lan_ip="$(echo ${_host_ip} | sed 's/.$//')0"
_lan_mask="$(ifconfig | grep -A 1 ${_lan_if} | tail -1 | awk -F" " '{print $4}')"
_wifi_if=wlan0
_wifi_ip="$(ip addr show ${_wifi_if} | grep 'inet ' | awk '{print $2}' | cut -f1 -d'/')"

echo "Host"
echo "${_host_ip}"
echo "${_lan_if} -> ${_lan_ip}/${_lan_mask}"

### Flush & Delete ALL rules ###
#iptables -F; iptables -X; iptables -t nat -F; iptables -t nat -X; iptables -t mangle -F

### General ###
iptables -P INPUT ACCEPT
iptables -P FORWARD ACCEPT
iptables -P OUTPUT ACCEPT
# Loopback
iptables -A INPUT -i lo -j ACCEPT
iptables -A FORWARD -i lo -j ACCEPT
iptables -A OUTPUT -o lo -j ACCEPT

# Allow established traffic pass back and forth
iptables -I FORWARD -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT

### Docker ###
_bridge_if=docker0
_bridge_ip="$(ifconfig | grep -A 1 ${_bridge_if} | tail -1 | awk -F" " '{print $2}' | sed 's/.$//')0"
_bridge_mask="$(ifconfig | grep -A 1 ${_bridge_if} | tail -1 | awk -F" " '{print $4}')"

echo "Docker"
echo "${_bridge_ip}/${_bridge_mask}"

# All apart of bridge can talk with each other
iptables -I FORWARD -i ${_bridge_if} -o ${_bridge_if} -j ACCEPT
# Allow traffic initiated to access LAN
iptables -I FORWARD -i ${_bridge_if} -o ${_lan_if} -m conntrack --ctstate NEW -j ACCEPT
# Instead of host ip resturn gives actual from request
iptables -t nat -I POSTROUTING -s ${_bridge_ip}/${_bridge_mask} -j SNAT --to-source ${_host_ip}
# Masquerade all traffic from clients -- done in the nat table
iptables -t nat -I POSTROUTING -o ${_lan_if} -s ${_bridge_ip}/${_bridge_mask} -j MASQUERADE

### VPN ###
_tun_if=tun0
_tun_ip="$(ifconfig | grep -A 1 ${_tun_if} | tail -1 | awk -F" " '{print $2}' | sed 's/.$//')0"
_tun_mask="$(ifconfig | grep -A 1 ${_tun_if} | tail -1 | awk -F" " '{print $4}')"

echo "VPN"
echo "${_tun_ip}/${_tun_mask}"

# https://community.openvpn.net/openvpn/wiki/BridgingAndRouting
# All apart of bridge can talk with each other
iptables -I FORWARD -i ${_tun_if} -o ${_tun_if} -j ACCEPT
# Allow traffic initiated to access LAN
iptables -I FORWARD -i ${_tun_if} -o ${_lan_if} -s ${_tun_ip}/${_tun_mask} -d ${_lan_ip}/${_lan_mask} -m conntrack --ctstate NEW -j ACCEPT
# Masquerade all traffic from clients -- done in the nat table
iptables -t nat -I POSTROUTING -o ${_lan_if} -s ${_tun_ip}/${_tun_mask} -j MASQUERADE

### Bridge Wifi to Ethernet ###
#iptables -t nat -A POSTROUTING -o ${_wifi_if} -j MASQUERADE
#iptables -A FORWARD -i ${_wifi_if} -o ${_lan_if} -m state --state RELATED,ESTABLISHED -j ACCEPT
#iptables -A FORWARD -i ${_lan_if} -o ${_wifi_if} -m state --state NEW -j ACCEPT

### PORT Forward ###
# forward port 3000 to 80
iptables -t nat -I PREROUTING -i ${_lan_if} -p tcp --dport 80 -j REDIRECT --to-port 3000

### Status ###
iptables -S; iptables -t nat -S
